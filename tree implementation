 // tree implemetation
#include <bits/stdc++.h>

using namespace std;

class node{
   public: 
    int data;
    node* left;
    node* right;
    
    node(int data){
        
        this->data=data;
        this->left=nullptr;
        this->right=nullptr;
        
    }
};
   node* insert(node* root){
       
       
    //    cout<<"enter root node\n";
       int data;
       cin>>data;
       root=new node(data);
       if(data==-1){
           return nullptr;
       }
      
       
    //    cout<<"enter left node\n";
       root->left=insert(root->left);
        // cout<<"enter right node\n";
       root->right=insert(root->right);
   }
 void levelorder(node* root){
       
       queue<node*>  q;
       q.push(root);
       q.push(nullptr);
    //   1 3 7 -1 -1 11 5 17 -1 -1 -
       while(!q.empty()){
           
           node* temp=q.front();
           q.pop();
           
           if(temp==nullptr){
               cout<<endl;
               if(!q.empty()){
                   q.push(nullptr);
               }
           }
           else{
               
               cout<<temp->data<<" ";
               if(temp->left){
                   q.push(temp->left);
               }
               if(temp->right){
                   q.push(temp->right);
               }
           }
       }
   }
int main()
{
    node* root=nullptr;
    
    cout<<"enter node\n";
    root=insert(root);
    levelorder(root);
    // 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
    return 0;
}
